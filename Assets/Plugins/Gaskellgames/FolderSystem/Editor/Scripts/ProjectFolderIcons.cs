#if UNITY_EDITOR
#if GASKELLGAMES
using System.Collections.Generic;
using System.IO;
using System.Threading;
using Gaskellgames.EditorOnly;
using UnityEditor;
using UnityEngine;

namespace Gaskellgames.FolderSystem.EditorOnly
{
    /// <summary>
    /// Code updated by Gaskellgames
    /// </summary>
    
    [InitializeOnLoad]
    public static class ProjectFolderIcons
    {
        #region Variables

        private const string packageRefName = "FolderSystem";
        private const string relativePath = "/Editor/Textures/";
        
        internal static Dictionary<string, Texture> autoGeneratedIconDictionary;
        
        private static readonly CancellationTokenSource TokenSource = new CancellationTokenSource();

        #endregion
        
        //----------------------------------------------------------------------------------------------------
        
        #region Constructors

        /// <summary>
        /// Update icon dictionary and run folder icon code during relevant OnGUI update loop.
        /// Note: Runs during the InitializeOnLoad call, so may be a delay in showing up for 'new users'
        /// </summary>
        static ProjectFolderIcons()
        {
            EditorApplication.projectWindowItemOnGUI -= DrawProjectFolderIcon;
            EditorApplication.projectWindowItemOnGUI += DrawProjectFolderIcon;
            
            GgEditorCallbacks.OnSafeInitialize -= InitialiseProjectFolderIcons;
            GgEditorCallbacks.OnSafeInitialize += InitialiseProjectFolderIcons;
            
            GgEditorCallbacks.OnAssetImported -= CheckIconExists_OnAssetImported;
            GgEditorCallbacks.OnAssetImported += CheckIconExists_OnAssetImported;
            
            GgEditorCallbacks.OnAssetMoved -= CheckIconExists_OnAssetMoved;
            GgEditorCallbacks.OnAssetMoved += CheckIconExists_OnAssetMoved;
            
            GgEditorCallbacks.OnAssetDeleted -= CheckIconExists_OnAssetDeleted;
            GgEditorCallbacks.OnAssetDeleted += CheckIconExists_OnAssetDeleted;
        }

        #endregion
        
        //----------------------------------------------------------------------------------------------------
        
        #region Internal Functions
        
        /// <summary>
        /// create a dictionary list of all icons searchable by their name
        /// </summary>
        internal static void AutoGenerateIconDictionary()
        {
            if (!GgPackageRef.TryGetFullFilePath(packageRefName, relativePath, out string filePath)) { return; }
            
            // get all custom icons
            Dictionary<string, Texture> dictionary = new Dictionary<string, Texture>();
            List<Texture> fileIcons = EditorExtensions.GetAllAssetsByType<Texture>(new []{ filePath });
            foreach (Texture fileIcon in fileIcons)
            {
                dictionary.Add(Path.GetFileNameWithoutExtension(fileIcon.name), fileIcon);
            }
            
            autoGeneratedIconDictionary = dictionary;
        }
        
        #endregion
        
        //----------------------------------------------------------------------------------------------------
        
        #region Private Functions
        
        private static void InitialiseProjectFolderIcons()
        {
            FolderSystemSettings_SO.Instance.Initialise();
        }
        
        private static void CheckIconExists_OnAssetImported(Object asset, string folderPath)
        {
            if (!GgPackageRef.TryGetFullFilePath(packageRefName, relativePath, out string filePath)) { return; }
            if (AssetDatabase.GetAssetPath(asset) + "/" != filePath) { return; }
            
            // new icon exists - update autoGeneratedIconDictionary
            AutoGenerateIconDictionary();
            if (FolderSystemSettings_SO.Instance && FolderSystemSettings_SO.Instance.ProjectFolderState != FolderSystemSettings_SO.SelectedState.Off)
            {
                FolderSystemSettings_SO.Instance.Initialise();
            }
        }
        
        private static void CheckIconExists_OnAssetMoved(Object asset, string newFolderPath, string oldFolderPath)
        {
            if (!GgPackageRef.TryGetFullFilePath(packageRefName, relativePath, out string filePath)) { return; }
            if (newFolderPath + "/" != filePath && oldFolderPath + "/" != filePath) { return; }
            
            // new icon or icon no longer exists - update autoGeneratedIconDictionary
            AutoGenerateIconDictionary();
            if (FolderSystemSettings_SO.Instance && FolderSystemSettings_SO.Instance.ProjectFolderState != FolderSystemSettings_SO.SelectedState.Off)
            {
                FolderSystemSettings_SO.Instance.Initialise();
            }
        }
        
        private static void CheckIconExists_OnAssetDeleted(string assetFilePath)
        {
            if (!GgPackageRef.TryGetFullFilePath(packageRefName, relativePath, out string filePath)) { return; }
            if (assetFilePath + "/" != filePath) { return; }
            
            // icon no longer exists - update autoGeneratedIconDictionary
            AutoGenerateIconDictionary();
            if (FolderSystemSettings_SO.Instance && FolderSystemSettings_SO.Instance.ProjectFolderState != FolderSystemSettings_SO.SelectedState.Off)
            {
                FolderSystemSettings_SO.Instance.Initialise();
            }
        }
        
        /// <summary>
        /// Draw a specified folder icon (based on guid) at a specified position
        /// </summary>
        /// <param name="guid"></param>
        /// <param name="position"></param>
        private static void DrawProjectFolderIcon(string guid, Rect position)
        {
            // null checks
            if (!FolderSystemSettings_SO.Instance) { return; }
            if (FolderSystemSettings_SO.Instance.ProjectFolderState == FolderSystemSettings_SO.SelectedState.Off) { return; }
            if (FolderSystemSettings_SO.Instance.folderIconDictionary == null) { return; }
            
            // get asset path & dictionary info
            string path = AssetDatabase.GUIDToAssetPath(guid);
            string fileName = Path.GetFileName(path);

            // check for valid draw
            if (path == "") { return; }
            if (Event.current.type != EventType.Repaint) { return; }
            if (!FolderSystemSettings_SO.Instance.folderIconDictionary.ContainsKey(fileName)) { return; }
            if (!File.GetAttributes(path).HasFlag(FileAttributes.Directory)) { return; }

            // get image position
            float positionX = position.x - 1;
            float positionY = position.y - 1;
            float positionWidth = position.height + 2;
            float positionHeight = position.height + 2;
            if (20 < position.height)
            {
                positionWidth = position.width + 2;
                positionHeight = position.width + 2;
            }
            else if (position.x < 20)
            {
                positionX = position.x + 2;
            }
            Rect imagePosition = new Rect(positionX, positionY, positionWidth, positionHeight);

            // get image texture
            Texture texture = FolderSystemSettings_SO.Instance.folderIconDictionary[fileName];
            if (texture == null) { return; }

            // draw image texture at image position
            GUI.DrawTexture(imagePosition, texture);
        }

        #endregion
        
    } // class end
}
        
#endif
#endif