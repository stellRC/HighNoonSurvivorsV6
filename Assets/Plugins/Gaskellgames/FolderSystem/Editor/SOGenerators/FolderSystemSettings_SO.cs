#if UNITY_EDITOR
#if GASKELLGAMES
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;

namespace Gaskellgames.FolderSystem.EditorOnly
{
    /// <summary>
    /// Code created by Gaskellgames
    /// </summary>

    [CreateAssetMenu(fileName = "FolderIconSettings", menuName = "Gaskellgames/Folder System/FolderIconSettings")]
    public class FolderSystemSettings_SO : ScriptableObject
    {
        #region Variables

        internal enum SelectedState
        {
            Off,
            AutoGenerated,
            UserGenerated
        }
        
        [SerializeField, ReadOnly]
        private SelectedState projectFolderState = SelectedState.AutoGenerated;
        
        internal SelectedState ProjectFolderState
        {
            get => projectFolderState;
            set
            {
                projectFolderState = value;
                CreateFolderIconDictionary();
            }
        }

        [SerializeField, ReadOnly]
        private SerializedDictionary<string, Texture> userGeneratedLinks;
        
        internal Dictionary<string, Texture> folderIconDictionary { get; private set; }

        #endregion
        
        //----------------------------------------------------------------------------------------------------
        
        #region Internal Functions
        
        private static FolderSystemSettings_SO instance;
        
        internal static FolderSystemSettings_SO Instance
        {
            get
            {
                if (instance == null)
                {
                    // Editor Default Resources
                    instance = (FolderSystemSettings_SO)EditorGUIUtility.Load("FolderSystemSettings");
                    
                    if (instance == null)
                    { 
                        // create a temp asset so there are no null pointer errors...
                        instance = ScriptableObject.CreateInstance<FolderSystemSettings_SO>();
                        
                        // ...and if editor then save it to disk
                        string properPath = System.IO.Path.Combine(UnityEngine.Application.dataPath, "Editor Default Resources");
                        if (!System.IO.Directory.Exists(properPath))
                        {
                            UnityEditor.AssetDatabase.CreateFolder("Assets", "Editor Default Resources");
                        }
                        string fullPath = System.IO.Path.Combine("Assets", "Editor Default Resources", "FolderSystemSettings.asset");
                        UnityEditor.AssetDatabase.CreateAsset(instance, fullPath);
                    }
                }
                
                return instance;
            }
        }

        internal void Initialise()
        {
            ProjectFolderIcons.AutoGenerateIconDictionary();
            CleanUserGeneratedLinks();
            CreateFolderIconDictionary();
        }

        internal void ResetUserGeneratedLinks()
        {
            ProjectFolderIcons.AutoGenerateIconDictionary();
            userGeneratedLinks = new SerializedDictionary<string, Texture>(ProjectFolderIcons.autoGeneratedIconDictionary);
        }

        internal void CleanUserGeneratedLinks()
        {
            userGeneratedLinks.Initialise();
            userGeneratedLinks.ClearInvalidEntries();
        }

        internal bool TryAddToUserGeneratedLinks(string key, Texture value)
        {
            return userGeneratedLinks.TryAdd(key, value);
        }

        internal bool RemoveFromUserGeneratedLinks(string key)
        {
            return userGeneratedLinks.Remove(key);
        }

        internal bool TryGetKeysForValue(Texture image, out List<string> keys)
        {
            return userGeneratedLinks.TryGetKeysForValue(image, out keys);
        }
        
        internal void CreateFolderIconDictionary()
        {
            folderIconDictionary = new Dictionary<string, Texture>();
            switch (projectFolderState)
            {
                case SelectedState.AutoGenerated:
                    ProjectFolderIcons.AutoGenerateIconDictionary();
                    folderIconDictionary = ProjectFolderIcons.autoGeneratedIconDictionary;
                    break;
                
                case SelectedState.UserGenerated:
                    folderIconDictionary = userGeneratedLinks.ToDictionary();
                    break;
                
                case SelectedState.Off:
                default:
                    break;
            }
        }

        #endregion
        
    } // class end
}
#endif
#endif